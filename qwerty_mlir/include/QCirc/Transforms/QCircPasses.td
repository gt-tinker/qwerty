//===-- QCircPasses.td - QCirc transformation definition file -*- tablegen -*-===//

#ifndef DIALECT_INCLUDE_QCIRC_TRANSFORMS_QCIRC_PASSES_TD
#define DIALECT_INCLUDE_QCIRC_TRANSFORMS_QCIRC_PASSES_TD

include "mlir/Pass/PassBase.td"

def DecomposeMultiControl : Pass<"decompose-multi-control"> {
  let summary = "Efficiently decompose multli-controlled gates";
  let constructor = "qcirc::createDecomposeMultiControlPass()";
}

def BarencoDecompose : Pass<"barenco-decompose"> {
  let summary = "Ensure circuit contains only Toffoli+CNOT+Pauli+H+S+T gates. `-decompose-multi-control` should run first";
  let constructor = "qcirc::createBarencoDecomposePass()";
}

def ReplaceUnusualGates : Pass<"replace-unusual-gates"> {
  let summary = "Ensure circuit contains only multi-controlled Pauli+H+S+T+Rxyz gates";
  let constructor = "qcirc::createReplaceUnusualGatesPass()";
}

def PeepholeOptimization : Pass<"peephole-optimization"> {
  let summary = "Replace specific gates to optimize the gates";
  let constructor = "qcirc::createPeepholeOptimizationPass()";
}

def InlineAdj : Pass<"inline-adj"> {
  let summary = "Replace every adj (adjoint) op with the adjoint of each of its containing gates in reverse order. This is mainly used for testing the AdjointBlock utility routines via qwerty-opt.";
  let constructor = "qcirc::createInlineAdjPass()";
}

def BaseProfileModulePrep : Pass<"base-profile-module-prep", "::mlir::ModuleOp"> {
  let summary = "Prepare module for lowering to QIR Base Profile";
  let constructor = "qcirc::createBaseProfileModulePrepPass()";
}

def BaseProfileFuncPrep : Pass<"base-profile-func-prep", "::mlir::func::FuncOp"> {
  let summary = "Prepare function for lowering to QIR Base Profile";
  let constructor = "qcirc::createBaseProfileFuncPrepPass()";
}

def QCircToQIRConversion : Pass<"convert-qcirc-to-qir", "::mlir::ModuleOp"> {
  let summary = "Lower QCirc dialect to QIR (LLVM IR)";
  let constructor = "qcirc::createQCircToQIRConversionPass()";
  let dependentDialects = ["mlir::LLVM::LLVMDialect"];
}

#endif // DIALECT_INCLUDE_QCIRC_TRANSFORMS_QCIRC_PASSES_TD

